{"version":3,"sources":["./src/app/shared/shared.module.ts","./src/app/bingo/bingo-routing.module.ts","./src/app/shared/directives/selected-grid-box.directive.ts","./src/app/bingo/bingo.module.ts","./src/app/bingo/grid/grid.component.html","./src/app/bingo/grid/grid.component.ts","./src/app/bingo/bingo.component.html","./src/app/bingo/bingo.component.ts"],"names":[],"mappings":"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","file":"bingo-bingo-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SelectedGridBoxDirective } from './directives/selected-grid-box.directive';\n\n\n\n@NgModule({\n  declarations: [\n    SelectedGridBoxDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [SelectedGridBoxDirective]\n})\nexport class SharedModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BingoComponent } from './bingo.component';\nimport { GridComponent } from './grid/grid.component';\n\nconst routes: Routes = [\n  { path: '', component: BingoComponent },\n  { path: 'grid', component: GridComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BingoRoutingModule { }\n","import { Directive, ElementRef } from '@angular/core';\n\n@Directive({\n  selector: '[appSelectedGridBox]'\n})\nexport class SelectedGridBoxDirective {\n\n  constructor(private el: ElementRef) { \n  \n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BingoRoutingModule } from './bingo-routing.module';\nimport { BingoComponent } from './bingo.component';\nimport { GridComponent } from './grid/grid.component';\nimport { SharedModule } from '../shared/shared.module';\n\n\n@NgModule({\n  declarations: [\n    BingoComponent,\n    GridComponent,\n  ],\n  imports: [\n    CommonModule,\n    BingoRoutingModule,\n    SharedModule\n  ]\n})\nexport class BingoModule { }\n","<div class=\"border grid-container card mb-2 col\">\n    <div class=\"m-2\">\n        <div id=\"gridHeaders\" class=\"row\">\n            <div [id]=\"header.toLowerCase()\" *ngFor=\"let header of gridHeaders; let i = index;\" class=\"col text-center font-bold grid-block grid-header\">\n                {{header}}\n            </div>\n        </div>\n        <div id=\"cards\" class=\"row\" *ngFor=\"let cards of grid;\">\n            <div id=\"{{card}}\" [ngClass]=\"{free: card.startsWith('*')}\" *ngFor=\"let card of cards; let i = index;\"\n                class=\"col grid-block text-center font-bold border\">\n                {{card}}\n            </div>\n        </div>\n    </div>\n</div>","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-grid',\n  templateUrl: './grid.component.html',\n  styleUrls: ['./grid.component.scss'],\n})\nexport class GridComponent implements OnInit {\n  @Input() grid: string[][] = [];\n  gridHeaders = 'BINGO'.split('');\n\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"grid-container col-12\">\n    <h3 id=\"title\" class=\"text-center text-white m-3\">Let's Play!</h3>\n    <hr class=\"mt-4\">\n    <div class=\"container\">\n        <ng-container #bingo *ngIf=\"!gameOver && bingo\">\n            <div class=\"text-center mb-4\">\n                <h1 class=\"text-white font-weight-bold\">Bingo!You won!</h1>\n                <img id=\"bitcoinImg\" [src]=\"bitcoinImg\" height=\"200px\">\n                <div class=\"text-center mt-2\">\n                    <button id=\"resetBtn\" class=\"btn spin-btn\" (click)=\"onReset()\">Reset</button>\n                </div>\n            </div>\n        </ng-container>\n\n        <ng-container #gameNotOver *ngIf=\"!gameOver\">\n            <p *ngIf=\"!bingo\" id=\"headerText\" class=\"text-center text-white m-3 title\">Draw random balls to fill in the\n                blocks..</p>\n            <div class=\"row\" *ngIf=\"!bingo\">\n                <div class=\"col\">\n                    <h1 id=\"remainingBalls\" class=\"text-center text-white m-3\">{{balls.length}}</h1>\n                    <p id=\"remainingBallsTitle\" class=\"text-center text-white m-3\">Remaining Balls</p>\n                </div>\n                <div class=\"col\">\n                    <h1 id=\"selectedBall\" class=\"text-center text-white m-3\">{{selectedBall}}</h1>\n                    <div class=\"text-center\">\n                        <button id=\"drawBtn\" class=\"btn spin-btn m-2\" (click)=\"onDraw()\">Draw!</button>\n                    </div>\n                </div>\n            </div>\n\n            <app-grid [grid]=\"grid\"></app-grid>\n            <div class=\"card\" *ngIf=\"!bingo\">\n                <p id=\"remainingBallsCardTitle\" class=\"text-center m-3\">Remaining Balls</p>\n                <p id=\"remainngBallsJson\">{{balls | json}}</p>\n            </div>\n        </ng-container>\n\n        <ng-container #gameOver *ngIf=\"gameOver && !bingo\">\n            <h1 id=\"title\" class=\"text-center text-danger m-3\">Game Over</h1>\n            <p id=\"errorMsg\" class=\"text-center text-white m-3 text-center\">You ran out of balls to draw from</p>\n            <div class=\"text-center\">\n                <button id=\"resetBtn\" class=\"btn spin-btn m-2\" (click)=\"onReset()\">Reset</button>\n            </div>\n        </ng-container>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bingo',\n  templateUrl: './bingo.component.html',\n  styleUrls: ['./bingo.component.scss'],\n})\nexport class BingoComponent implements OnInit {\n  grid: string[][] = [];\n  balls: number[] = [];\n  characters = 'BINGO';\n  selectedBall = 0;\n  bingoDraw = Array.from(Array(75).keys());\n  gameOver = false;\n  bingo = false;\n  bitcoinImg = 'assets/svg/bitcoin.svg';\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.generateInitialGrid();\n    this.generateBalls();\n  }\n\n  onReset() {\n    this.bingo = false;\n    this.grid = [];\n    this.balls = [];\n    this.gameOver = false;\n    this.selectedBall = 0;\n    this.bingoDraw = Array.from(Array(75).keys());\n    this.generateInitialGrid();\n    this.generateBalls();\n  }\n\n  /**\n   * Initial display of the populated grid\n   */\n  generateInitialGrid() {\n    for (let i = 0; i < 5; i++) {\n      const row = [];\n      for (let k = 0; k < 5; k++) {\n        if (i === 2 && k === 2) {\n          row.push('*');\n        } else {\n          row.push(`${Math.floor(Math.random() * 100)}`);\n        }\n      }\n      this.grid.push(row);\n    }\n  }\n\n  /**\n   * Generate balls to draw from\n   */\n  generateBalls() {\n    for (let index = 0; index < this.bingoDraw.length; index++) {\n      this.balls.push(Math.floor(Math.random() * this.bingoDraw.length));\n    }\n  }\n\n  onDraw() {\n    if (this.balls.length > 1) {\n      const random = Math.floor(Math.random() * this.balls.length);\n      this.selectedBall = this.balls[random];\n      this.balls.splice(random, 1);\n\n      for (let i = 0; i < this.grid.length; i++) {\n        const cards = this.grid[i];\n        for (let j = 0; j < cards.length; j++) {\n          const card = cards[j];\n          if (Number(card) === this.selectedBall) {\n            cards[j] = `*${cards[j]}`;\n          }\n        }\n      }\n    } else {\n      this.gameOver = true;\n    }\n\n    this.bingo =\n      this.getBingoVerticalRows ||\n      this.getBingoHorizontalRows ||\n      this.getBingoDiagonalRows;\n  }\n\n  get getBingoVerticalRows(): boolean {\n    let result = false;\n    for (let i = 0; i < this.grid.length; i++) {\n      const cards = this.grid[i];\n      for (let j = 0; j < cards.length; j++) {\n        if (cards.every((card) => String(card).startsWith('*'))) {\n          result = true;\n        } else {\n          result = false;\n          break;\n        }\n      }\n      if (result) break;\n    }\n    return result;\n  }\n\n  get getBingoHorizontalRows(): boolean {\n    let result = false;\n    for (let i = 0; i < this.grid.length; i++) {\n      if (\n        this.grid[i][0].startsWith('*') &&\n        this.grid[i + 1][0].startsWith('*') &&\n        this.grid[i + 2][0].startsWith('*') &&\n        this.grid[i + 3][0].startsWith('*') &&\n        this.grid[i + 4][0].startsWith('*')\n      ) {\n        result = true;\n        break;\n      }\n    }\n    return result;\n  }\n\n  get getBingoDiagonalRows(): boolean {\n    let result = false;\n    for (let i = 0; i < this.grid.length; i++) {\n      if (\n        i == 0 &&\n        this.grid[i][0].startsWith('*') &&\n        this.grid[i + 1][1].startsWith('*') &&\n        this.grid[i + 2][2].startsWith('*') &&\n        this.grid[i + 3][3].startsWith('*') &&\n        this.grid[i + 4][4].startsWith('*')\n      ) {\n        result = true;\n        break;\n      } else if (\n        i == 4 &&\n        this.grid[i][0].startsWith('*') &&\n        this.grid[i + 1][3].startsWith('*') &&\n        this.grid[i + 2][2].startsWith('*') &&\n        this.grid[i + 3][1].startsWith('*') &&\n        this.grid[i + 4][0].startsWith('*')\n      ) {\n        result = true;\n        break;\n      }\n    }\n    return result;\n  }\n}\n"],"sourceRoot":"webpack:///"}